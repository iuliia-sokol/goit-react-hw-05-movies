{"version":3,"file":"static/js/736.4a22965a.chunk.js","mappings":"iQAEaA,EAAgBC,EAAAA,GAAAA,IAAH,+GAObC,EAAWD,EAAAA,GAAAA,GAAH,0GAQRE,EAAWF,EAAAA,GAAAA,GAAH,0PAaRG,EAAWH,EAAAA,GAAAA,IAAH,gFAMRI,EAAkBJ,EAAAA,GAAAA,IAAH,8EAMfK,EAAmBL,EAAAA,GAAAA,IAAH,4HAQhBM,EAAWN,EAAAA,GAAAA,KAAH,sB,SCGrB,EAxCa,WACX,IAAQO,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAgCE,EAAAA,EAAAA,YAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,aAAwBN,GAAIO,KAAKH,EAClC,GAAE,CAACJ,IAECG,GAKH,SAACX,EAAD,WACE,SAACE,EAAD,UACGS,EAASK,KAAI,SAAAC,GAAE,OACd,UAACd,EAAD,YACE,SAACE,EAAD,WACE,SAACD,EAAD,CACEc,IACED,EAAGE,aAAH,UACOL,EAAAA,EAAAA,UADP,OAC6BG,EAAGE,cAC5BL,EAAAA,EAAAA,WAENM,IAAKH,EAAGI,UAGZ,UAACf,EAAD,YACE,uBAAIW,EAAGI,QACP,wCACa,SAACd,EAAD,UAAWU,EAAGK,oBAdhBL,EAAGT,GADJ,QANb,IA6BV,C,0ICjDDe,EAAAA,EAAAA,SAAAA,QAAA,gCACA,yBAEaC,EAAb,WAGE,cAAe,+DALL,qCAMRC,KAAKC,SAAW,kCAChBD,KAAKE,WACH,+HACH,CAPH,kFASE,WAAuBC,GAAvB,kFACQC,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPG,KAAMA,IAHV,SAMyBL,EAAAA,EAAAA,IAAU,qBAAsB,CAAEM,OAAAA,IAN3D,uBAMUG,EANV,EAMUA,KANV,kBAQSA,GART,gDATF,uHAoBE,WAAsBC,EAAOL,GAA7B,kFACQC,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPQ,MAAOA,EACPL,KAAMA,EACNM,SAAU,QACVC,eAAe,IANnB,SASyBZ,EAAAA,EAAAA,IAAU,gBAAiB,CAAEM,OAAAA,IATtD,uBASUG,EATV,EASUA,KATV,kBAUSA,GAVT,gDApBF,sHAiCE,WAAmBxB,GAAnB,8EACQqB,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPS,SAAU,QACVC,eAAe,IAJnB,SAMeC,MAAM,sCAAD,OACsB5B,EADtB,YAC4BqB,IAC5Cd,MAAK,SAAAsB,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,0CAElB,OAAOF,EAASG,MACjB,IAbH,wFAjCF,oHAiDE,WAAmBhC,GAAnB,kFACQqB,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPS,SAAU,UAHd,SAKyBX,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,oBAAiCqB,IAL1D,uBAKUG,EALV,EAKUA,KALV,kBAMSA,EAAKS,MANd,gDAjDF,sHA0DE,WAAqBjC,GAArB,kFACQqB,EAAS,IAAIC,gBAAgB,CACjCC,SAAQ,OAACN,KAAF,MACPS,SAAU,UAHd,SAKyBX,EAAAA,EAAAA,IAAA,gBAAmBf,EAAnB,oBAAiCqB,IAL1D,uBAKUG,EALV,EAKUA,KALV,kBAMSA,EAAKU,SANd,gDA1DF,8DA2Fa5B,EAAa,IAAIU,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","fetchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastConteiner = styled.div`\n  padding: 36px;\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 9px;\n  padding: 0;\n`;\n\nexport const CastItem = styled.li`\n  padding: 8px;\n  width: calc((100%-90px) / 10);\n  display: flex;\n  flex-wrap: wrap;\n  gap: 18px;\n  justify-content: space-between;\n  text-align: space-between;\n  font-size: 8px;\n  height: 150px;\n  font-weight: 700;\n`;\n\nexport const ActorImg = styled.img`\n  border-radius: 50%;\n  width: 70px;\n  height: 70px;\n`;\n\nexport const ActorImgWrapper = styled.div`\n  flex-grow: 1;\n  width: 100%;\n  max-height: 60px;\n`;\n\nexport const ActorDataWrapper = styled.div`\n  flex-grow: 2;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  gap: 6px;\n`;\n\nexport const FilmHero = styled.span``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovie } from '../../fetchAPI';\nimport {\n  CastList,\n  CastConteiner,\n  CastItem,\n  ActorImg,\n  ActorImgWrapper,\n  ActorDataWrapper,\n  FilmHero,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [castList, setCastList] = useState();\n\n  useEffect(() => {\n    fetchMovie.getMovieCast(id).then(setCastList);\n  }, [id]);\n\n  if (!castList) {\n    return null;\n  }\n\n  return (\n    <CastConteiner>\n      <CastList>\n        {castList.map(el => (\n          <CastItem key={el.id}>\n            <ActorImgWrapper>\n              <ActorImg\n                src={\n                  el.profile_path\n                    ? `${fetchMovie.BASE_URL}${el.profile_path}`\n                    : fetchMovie.defaultImg\n                }\n                alt={el.name}\n              />\n            </ActorImgWrapper>\n            <ActorDataWrapper>\n              <p>{el.name}</p>\n              <p>\n                Character: <FilmHero>{el.character}</FilmHero>\n              </p>\n            </ActorDataWrapper>\n          </CastItem>\n        ))}\n      </CastList>\n    </CastConteiner>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst KEY = '663bd5fd8d905b7ce2d57e9867d3492e';\n\nexport class ThemoviedbAPI {\n  #API_KEY = KEY;\n\n  constructor() {\n    this.BASE_URL = 'https://image.tmdb.org/t/p/w500';\n    this.defaultImg =\n      'https://m.media-amazon.com/images/M/MV5BMTRkZGE0YWYtMDFhOS00N2I4LTljMTMtYjk0MTI2YmVhOTU4XkEyXkFqcGdeQXVyNjgxNzM0NDI@._V1_.jpg';\n  }\n\n  async getPopularMovies(page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      page: page,\n    });\n\n    const { data } = await axios.get('trending/movie/day', { params });\n    // console.log(data);\n    return data;\n  }\n\n  async getMovieByQuery(query, page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      query: query,\n      page: page,\n      language: 'en-US',\n      include_adult: false,\n    });\n\n    const { data } = await axios.get('/search/movie', { params });\n    return data;\n  }\n\n  async getMovieById(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n      include_adult: false,\n    });\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${id}?${params}`\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error('Oops, there is no movie with that name');\n      }\n      return response.json();\n    });\n  }\n\n  async getMovieCast(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/credits?${params}`);\n    return data.cast;\n  }\n\n  async getMovieReview(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/reviews?${params}`);\n    return data.results;\n  }\n\n  //   async fetchTrailerById(id) {\n  //     const params = new URLSearchParams({\n  //       api_key: this.#API_KEY,\n  //     });\n  //     return await fetch(\n  //       `https://api.themoviedb.org/3/movie/${id}/videos?${params}`\n  //     ).then(response => {\n  //       if (!response.ok) {\n  //         throw new Error('Oops, there is no movie with that name');\n  //       }\n  //       return response.json();\n  //     });\n  //   }\n\n  //   async fetchGenres() {\n  //     const params = new URLSearchParams({\n  //       api_key: this.#API_KEY,\n  //     });\n  //     const allGenres = await axios.get('/genre/movie/list', { params });\n  //     this.genres = allGenres.data.genres;\n  //     return allGenres;\n  //   }\n}\n\nexport const fetchMovie = new ThemoviedbAPI();\n"],"names":["CastConteiner","styled","CastList","CastItem","ActorImg","ActorImgWrapper","ActorDataWrapper","FilmHero","id","useParams","useState","castList","setCastList","useEffect","fetchMovie","then","map","el","src","profile_path","alt","name","character","axios","ThemoviedbAPI","this","BASE_URL","defaultImg","page","params","URLSearchParams","api_key","data","query","language","include_adult","fetch","response","ok","Error","json","cast","results"],"sourceRoot":""}