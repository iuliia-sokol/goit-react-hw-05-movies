{"version":3,"file":"static/js/257.fb9c7b6b.chunk.js","mappings":"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","sources":["fetchAPI.js","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\nconst KEY = '663bd5fd8d905b7ce2d57e9867d3492e';\n\nexport class ThemoviedbAPI {\n  #API_KEY = KEY;\n\n  constructor() {\n    this.BASE_URL = 'https://image.tmdb.org/t/p/w500';\n    this.defaultImg =\n      'https://m.media-amazon.com/images/M/MV5BMTRkZGE0YWYtMDFhOS00N2I4LTljMTMtYjk0MTI2YmVhOTU4XkEyXkFqcGdeQXVyNjgxNzM0NDI@._V1_.jpg';\n  }\n\n  async getPopularMovies(page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      page: page,\n    });\n\n    const { data } = await axios.get('trending/movie/day', { params });\n    // console.log(data);\n    return data;\n  }\n\n  async getMovieByQuery(query, page) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      query: query,\n      page: page,\n      language: 'en-US',\n      include_adult: false,\n    });\n\n    const { data } = await axios.get('/search/movie', { params });\n    return data;\n  }\n\n  async getMovieById(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n      include_adult: false,\n    });\n    return await fetch(\n      `https://api.themoviedb.org/3/movie/${id}?${params}`\n    ).then(response => {\n      if (!response.ok) {\n        throw new Error('Oops, there is no movie with that name');\n      }\n      return response.json();\n    });\n  }\n\n  async getMovieCast(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/credits?${params}`);\n    return data.cast;\n  }\n\n  async getMovieReview(id) {\n    const params = new URLSearchParams({\n      api_key: this.#API_KEY,\n      language: 'en-US',\n    });\n    const { data } = await axios.get(`movie/${id}/reviews?${params}`);\n    return data.results;\n  }\n\n  //   async fetchTrailerById(id) {\n  //     const params = new URLSearchParams({\n  //       api_key: this.#API_KEY,\n  //     });\n  //     return await fetch(\n  //       `https://api.themoviedb.org/3/movie/${id}/videos?${params}`\n  //     ).then(response => {\n  //       if (!response.ok) {\n  //         throw new Error('Oops, there is no movie with that name');\n  //       }\n  //       return response.json();\n  //     });\n  //   }\n\n  //   async fetchGenres() {\n  //     const params = new URLSearchParams({\n  //       api_key: this.#API_KEY,\n  //     });\n  //     const allGenres = await axios.get('/genre/movie/list', { params });\n  //     this.genres = allGenres.data.genres;\n  //     return allGenres;\n  //   }\n}\n\nexport const fetchMovie = new ThemoviedbAPI();\n","import styled from 'styled-components';\n\nexport const WrapperMovie = styled.div`\n  display: flex;\n  gap: 20px;\n  font-weight: 500;\n`;\n\nexport const MovieDataWrapper = styled.div`\n  padding: 24px;\n  font-size: 12px;\n`;\n\nexport const MoviePic = styled.img`\n  border-radius: 24px;\n`;\n\nexport const OverviewContent = styled.p`\n  text-align: justify;\n`;\n\nexport const MovieList = styled.ul`\n  display: flex;\n  list-style: none;\n  gap: 40px;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const MovieInfo = styled.div`\n  height: auto;\n  margin-top: 30px;\n  padding-bottom: 30px;\n  border-bottom: 1px solid black;\n  border-top: 1px solid black;\n`;\n\nexport const Genres = styled.ul`\n  display: flex;\n`;\n\nexport const Title = styled.h2`\n  text-transform: uppercase;\n  letter-spacing: 1.7;\n  margin-bottom: 20px;\n  font-size: 20px;\n  font-weight: 600px;\n`;\n\nexport const SubTitle = styled.h3`\n  text-transform: uppercase;\n  letter-spacing: 1.7;\n  margin-bottom: 20px;\n  margin-top: 20px;\n  font-size: 18px;\n  font-weight: 500px;\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchMovie } from '../../fetchAPI';\nimport { Loader } from '../../components/Loader/Loader';\nimport {\n  WrapperMovie,\n  MovieDataWrapper,\n  MovieList,\n  MovieInfo,\n  MoviePic,\n  OverviewContent,\n  Genres,\n  Title,\n  SubTitle,\n} from './MovieDetails.styled';\nimport { Link } from '../StartPage/StartPage.styled';\n\n// import { BackLink } from 'components/BackLink/BackLink';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n\n  const [movieId, setMovieId] = useState(null);\n  const location = useLocation();\n  //   const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    fetchMovie.getMovieById(id).then(setMovieId);\n  }, [id]);\n\n  if (!movieId) {\n    return null;\n  }\n\n  const {\n    poster_path,\n    original_title,\n    original_name,\n    release_date,\n    first_air_date,\n    vote_average,\n    genres,\n    overview,\n  } = movieId;\n\n  return (\n    <div>\n      {/* <BackLink to={backLinkHref}>Go back</BackLink> */}\n      <WrapperMovie>\n        <MoviePic\n          src={`${fetchMovie.BASE_URL}${poster_path}`}\n          alt={original_title}\n          width=\"300\"\n        />\n        <MovieDataWrapper>\n          <Title>\n            {original_title || original_name} (\n            <span>{parseInt(release_date || first_air_date)}</span>)\n          </Title>\n          <OverviewContent>\n            User Score: {`${Math.round(vote_average * 10)}%`}\n          </OverviewContent>\n          <SubTitle>Overview</SubTitle>\n          <OverviewContent>{overview}</OverviewContent>\n          <SubTitle>Genres</SubTitle>\n          <Genres>\n            {genres.map((genre, index) => (\n              <li key={index} style={{ marginRight: '10px' }}>\n                {genre.name}\n              </li>\n            ))}\n          </Genres>\n        </MovieDataWrapper>\n      </WrapperMovie>\n      <MovieInfo>\n        <SubTitle>Additional Information</SubTitle>\n        <MovieList>\n          <li>\n            <Link to=\"cast\" state={location.state}>\n              Cast\n            </Link>{' '}\n          </li>\n          <li>\n            <Link to=\"review\" state={location.state}>\n              Reviews\n            </Link>{' '}\n          </li>\n        </MovieList>\n      </MovieInfo>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["axios","ThemoviedbAPI","this","BASE_URL","defaultImg","page","params","URLSearchParams","api_key","data","query","language","include_adult","id","fetch","then","response","ok","Error","json","cast","results","fetchMovie","WrapperMovie","styled","MovieDataWrapper","MoviePic","OverviewContent","MovieList","MovieInfo","Genres","Title","SubTitle","useParams","useState","movieId","setMovieId","location","useLocation","useEffect","poster_path","original_title","original_name","release_date","first_air_date","vote_average","genres","overview","src","alt","width","parseInt","Math","round","map","genre","index","style","marginRight","name","to","state","Suspense","fallback","Loader"],"sourceRoot":""}